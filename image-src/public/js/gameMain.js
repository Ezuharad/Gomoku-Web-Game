import { gameBoard } from  "./gameBoard.js";
import { TILE_LENGTH_PX, gameCanvas } from "./components/gameCanvas.js";
import { timer } from "./components/timer.js";
import { validateIsMouseEvent, validateIsPieceCoordinate } from "./abstract/validator.js";

// Document element constants
const GAME_CANVAS_ELEMENT = document.getElementById("game_canvas");
const PLAYER_TIMER_ELEMENT = document.getElementById("player_timer_div");
const OPPONENT_TIMER_ELEMENT = document.getElementById("opponent_timer_div");

// Game constants
let currColor = "black";

// Make game objects global scope
let GB;  // Game board
let GC;  // Game canvas
let PT;  // Player timer
let OT;  // Opponent timer

// Setup the page on window load
window.onload = setupGamePage();

/**
 * Gives a piece coordinate from a mouse coordinate.
 * @param {number} mouseCoord - The mouse coordinate to be transformed.
 * @returns {number} - The mouse coordinate's corresponding piece coordinate.
 */
function mouseCoordToPieceCoord(mouseCoord) {
    const pieceCoord = Math.floor(mouseCoord / TILE_LENGTH_PX);
    if(!validateIsPieceCoordinate(pieceCoord)) {
        raise("gameMain mouseCoordToPieceCoord function generated malformed "
        + "pieceCoord!");
    }

    return pieceCoord;
}

// TODO: Add extra conditions to onClickGameCanvas docs
/**
 * Tries to place a piece on the game board.
 * 
 * First tries to place a piece on the gameboard. If the game board is 
 * empty at the selected square, then the piece will be placed.
 * @param {MouseEvent} mouseEvent - The event generated by clicking the 
 * canvas.
 */
function onClickGameCanvas(mouseEvent) {
    if(!validateIsMouseEvent(mouseEvent)) {
        throw("gameMain onClickGameCanvas function received malformed "
        + "mouseEvent!");
    }  // TODO: This method needs to be completely rewritten

    const xPosition = mouseCoordToPieceCoord(mouseEvent.offsetX);
    const yPosition = mouseCoordToPieceCoord(mouseEvent.offsetY);

    // Try to place the piece in the gameboard
    if(!GB.placePiece(currColor, xPosition, yPosition)) {
        return;
    }
    GC.drawPiece(currColor, xPosition, yPosition);

    if(GB.checkWinAt(xPosition, yPosition)) {
        console.log("WINNER!");
    }
    swapColor();
    swapTimer();
}

/**
 * Sets up game page.
 * 
 * Calls gameBoard, gameCanvas, and two timer constructors. Then adds an event 
 * listener for clicking the game canvas.
 */
function setupGamePage() {
    GB = new gameBoard();
    GC = new gameCanvas(GAME_CANVAS_ELEMENT);
    PT = new timer(PLAYER_TIMER_ELEMENT);
    OT = new timer(OPPONENT_TIMER_ELEMENT);

    GAME_CANVAS_ELEMENT.addEventListener("mousedown", onClickGameCanvas, 
    false);
}

// TODO: This function might be deprecated.
/**
 * Swaps the current color between black and white.
 */
function swapColor() {
    if(currColor === "white") {
        currColor = "black";
    }
    else {
        currColor = "white";
    }
}

// TODO: This function might be deprecated.
/**
 * Swaps the current running timers.
 */
function swapTimer() {
    if(!PT.isRunning()) {
        PT.start();
        OT.stop();
    }
    else {
        PT.stop();
        OT.start();
    }
}
